# app.py
import streamlit as st
import sqlite3
import plotly.express as px
import pandas as pd
import random
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π!)
st.set_page_config(
    page_title="–û–∫–æ –∑–∞ –æ–∫–æ",
    page_icon="üëÅÔ∏è",
    layout="centered"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('game_stats.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT UNIQUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS games (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    opponent_strategy TEXT,
    user_score INTEGER,
    opponent_score INTEGER,
    result TEXT,
    played_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
)''')
conn.commit()

# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–æ—Ç–∞
strategies = {
    '–í—Å–µ–≥–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å': lambda _, oh: 'cooperate',
    '–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–∞–≤–∞—Ç—å': lambda _, oh: 'betray',
    '–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä': lambda _, oh: random.choice(['cooperate', 'betray']),
    '–û–∫–æ –∑–∞ –æ–∫–æ': lambda _, oh: 'cooperate' if not oh else oh[-1],
    '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∫–æ': lambda mh, oh: 'betray' if not mh else oh[-1]
}

def get_or_create_user(username):
    cursor.execute('SELECT id FROM users WHERE username=?', (username,))
    user = cursor.fetchone()
    if user: return user[0]
    cursor.execute('INSERT INTO users (username) VALUES (?)', (username,))
    conn.commit()
    return cursor.lastrowid

def init_game_state():
    if 'game' not in st.session_state:
        st.session_state.game = {
            'round': 0,
            'user_score': 0,
            'bot_score': 0,
            'user_choices': [],
            'bot_choices': [],
            'strategy': None,
            'user_id': None
        }

def show_stats():
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤")
    
    # –õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏
    cursor.execute('''
        SELECT u.username, SUM(g.user_score), COUNT(g.id)
        FROM games g
        JOIN users u ON g.user_id = u.id
        GROUP BY u.username
        ORDER BY SUM(g.user_score) DESC
        LIMIT 10''')
    players = cursor.fetchall()
    
    df_players = pd.DataFrame(players, columns=['–ò–≥—Ä–æ–∫', '–û—á–∫–∏', '–ò–≥—Ä'])
    fig1 = px.bar(df_players, x='–ò–≥—Ä–æ–∫', y='–û—á–∫–∏', title="–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º")
    st.plotly_chart(fig1)
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    cursor.execute('''
        SELECT opponent_strategy, 
               AVG(user_score),
               COUNT(*),
               SUM(CASE WHEN result='loss' THEN 1 ELSE 0 END) AS bot_wins
        FROM games
        GROUP BY opponent_strategy''')
    strats = cursor.fetchall()
    
    df_strats = pd.DataFrame(strats, columns=['–°—Ç—Ä–∞—Ç–µ–≥–∏—è', '–°—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏', '–ò–≥—Ä', '–ü–æ–±–µ–¥—ã –±–æ—Ç–∞'])
    fig2 = px.pie(df_strats, names='–°—Ç—Ä–∞—Ç–µ–≥–∏—è', values='–ò–≥—Ä', title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    st.plotly_chart(fig2)
    
    # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–±–µ–¥ –±–æ—Ç–∞
    cursor.execute('''
        SELECT played_at, SUM(CASE WHEN result='loss' THEN 1 ELSE 0 END) AS bot_wins
        FROM games
        GROUP BY played_at
        ORDER BY played_at''')
    bot_wins = cursor.fetchall()
    
    df_bot_wins = pd.DataFrame(bot_wins, columns=['–î–∞—Ç–∞', '–ü–æ–±–µ–¥—ã –±–æ—Ç–∞'])
    fig3 = px.line(df_bot_wins, x='–î–∞—Ç–∞', y='–ü–æ–±–µ–¥—ã –±–æ—Ç–∞', title="–ü–æ–±–µ–¥—ã –±–æ—Ç–∞ –ø–æ –¥–∞—Ç–∞–º")
    st.plotly_chart(fig3)

def play_round(user_choice):
    bot_choice = strategies[st.session_state.game['strategy']](
        st.session_state.game['user_choices'],
        st.session_state.game['bot_choices']
    )
    
    # –†–∞—Å—á–µ—Ç –æ—á–∫–æ–≤
    if user_choice == 'cooperate' and bot_choice == 'cooperate':
        us, bs = 3, 3
    elif user_choice == 'cooperate' and bot_choice == 'betray':
        us, bs = 0, 5
    elif user_choice == 'betray' and bot_choice == 'cooperate':
        us, bs = 5, 0
    else:
        us, bs = 1, 1
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    st.session_state.game['user_score'] += us
    st.session_state.game['bot_score'] += bs
    st.session_state.game['user_choices'].append(user_choice)
    st.session_state.game['bot_choices'].append(bot_choice)
    st.session_state.game['round'] += 1

def show_game():
    st.header("üéÆ –ò–≥—Ä–∞: –û–∫–æ –∑–∞ –æ–∫–æ")
    
    if st.session_state.game['round'] >= 10:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result = 'win' if st.session_state.game['user_score'] > st.session_state.game['bot_score'] else 'loss'
        cursor.execute('''
            INSERT INTO games 
            (user_id, opponent_strategy, user_score, opponent_score, result)
            VALUES (?,?,?,?,?)''',
            (st.session_state.game['user_id'],
             st.session_state.game['strategy'],
             st.session_state.game['user_score'],
             st.session_state.game['bot_score'],
             result))
        conn.commit()
        
        # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.success(f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.upper()}")
        st.metric(label="–í–∞—à–∏ –æ—á–∫–∏", value=st.session_state.game['user_score'])
        st.metric(label="–û—á–∫–∏ –±–æ—Ç–∞", value=st.session_state.game['bot_score'])
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        del st.session_state.game
        return

    st.subheader(f"–†–∞—É–Ω–¥ {st.session_state.game['round'] + 1}/10")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å", use_container_width=True):
            play_round('cooperate')
    with col2:
        if st.button("üî™ –ü—Ä–µ–¥–∞—Ç—å", use_container_width=True):
            play_round('betray')
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä—ã
    st.progress(st.session_state.game['round'] / 10)
    st.write(f"–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {st.session_state.game['user_score']} : {st.session_state.game['bot_score']}")

# –û—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def stats_page():
    st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    show_stats()

# –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ–º –∏ —Å—Å—ã–ª–∫–æ–π
def shapes_page():
    st.title("üñºÔ∏è –§–∏–≥—É—Ä—ã")
    st.write("""
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–∏–≥—É—Ä–∞–º–∏! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —Å–∞–π—Ç, 
        –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å —Ñ–∏–≥—É—Ä—ã. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å 
        —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.
    """)
    st.markdown("[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–∏–≥—É—Ä–∞–º](https://www.desmos.com/3d/pswxnacwyy)")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", ["–ò–≥—Ä–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–§–∏–≥—É—Ä—ã"])

if page == "–ò–≥—Ä–∞":
    st.title("üëÅÔ∏è –û–∫–æ –∑–∞ –æ–∫–æ: –≠–≤–æ–ª—é—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")
    init_game_state()
    
    # –í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")
    if not username:
        st.stop()
    
    user_id = get_or_create_user(username)
    st.session_state.game['user_id'] = user_id
    
    # –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    if not st.session_state.game['strategy']:
        strategy = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –±–æ—Ç–∞:",
            list(strategies.keys())
        )
        if st.button("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"):
            st.session_state.game['strategy'] = strategy
            st.rerun()
        st.stop()
    
    show_game()

elif page == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
    stats_page()

elif page == "–§–∏–≥—É—Ä—ã":
    shapes_page()