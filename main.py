# app.py
import streamlit as st
import sqlite3
import plotly.express as px
import pandas as pd
import random
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π!)
st.set_page_config(
    page_title="–û–∫–æ –∑–∞ –æ–∫–æ",
    page_icon="üëÅÔ∏è",
    layout="centered"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('game_stats.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT UNIQUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS games (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    opponent_strategy TEXT,
    user_score INTEGER,
    opponent_score INTEGER,
    result TEXT,
    played_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
)''')
conn.commit()

# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–æ—Ç–∞
strategies = {
    '–í—Å–µ–≥–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å': lambda _, oh: 'cooperate',
    '–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–∞–≤–∞—Ç—å': lambda _, oh: 'betray',
    '–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä': lambda _, oh: random.choice(['cooperate', 'betray']),
    '–û–∫–æ –∑–∞ –æ–∫–æ': lambda mh, oh: 'betray' if len(mh) >= 2 and mh[-1] == 'betray' and mh[-2] == 'betray' else 'cooperate',
    '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∫–æ': lambda mh, oh: 'betray' if not mh else oh[-1]
}

def get_or_create_user(username):
    cursor.execute('SELECT id FROM users WHERE username=?', (username,))
    user = cursor.fetchone()
    if user: return user[0]
    cursor.execute('INSERT INTO users (username) VALUES (?)', (username,))
    conn.commit()
    return cursor.lastrowid

def init_game_state():
    if 'game' not in st.session_state:
        st.session_state.game = {
            'round': 0,
            'user_score': 0,
            'bot_score': 0,
            'user_choices': [],
            'bot_choices': [],
            'strategy': None,
            'user_id': None
        }

def show_moves():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö–æ–¥–æ–≤"""
    # –•–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.markdown("**–í–∞—à–∏ —Ö–æ–¥—ã**")
    cols = st.columns(10)
    for i in range(10):
        if i < len(st.session_state.game['user_choices']):
            move = st.session_state.game['user_choices'][i]
            color = "green" if move == "cooperate" else "red"
            cols[i].markdown(f"<div style='background-color: {color}; border-radius: 50%; width: 30px; height: 30px;'></div>", 
                           unsafe_allow_html=True)
        else:
            cols[i].markdown(f"<div style='background-color: lightgray; border-radius: 50%; width: 30px; height: 30px;'></div>", 
                           unsafe_allow_html=True)
    
    # –•–æ–¥—ã –±–æ—Ç–∞
    st.markdown("**–•–æ–¥—ã –±–æ—Ç–∞**")
    cols = st.columns(10)
    for i in range(10):
        if i < len(st.session_state.game['bot_choices']):
            move = st.session_state.game['bot_choices'][i]
            color = "green" if move == "cooperate" else "red"
            cols[i].markdown(f"<div style='background-color: {color}; border-radius: 50%; width: 30px; height: 30px;'></div>", 
                           unsafe_allow_html=True)
        else:
            cols[i].markdown(f"<div style='background-color: lightgray; border-radius: 50%; width: 30px; height: 30px;'></div>", 
                           unsafe_allow_html=True)

def show_stats():
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    
    # –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∞–ª–ª–æ–≤
    st.subheader("–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∞–ª–ª–æ–≤")
    cursor.execute('''
        SELECT u.username, SUM(g.user_score) as total_score
        FROM games g
        JOIN users u ON g.user_id = u.id
        GROUP BY u.username
        ORDER BY total_score DESC
        LIMIT 10
    ''')
    top_players = cursor.fetchall()
    
    df_top_players = pd.DataFrame(top_players, columns=['–ò–≥—Ä–æ–∫', '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤'])
    fig1 = px.bar(df_top_players, x='–ò–≥—Ä–æ–∫', y='–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤', title="–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–ª–∞–º")
    st.plotly_chart(fig1)
    
    # –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    st.subheader("–°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
    cursor.execute('''
        SELECT opponent_strategy, AVG(user_score) as avg_score
        FROM games
        GROUP BY opponent_strategy
    ''')
    avg_scores = cursor.fetchall()
    
    df_avg_scores = pd.DataFrame(avg_scores, columns=['–°—Ç—Ä–∞—Ç–µ–≥–∏—è', '–°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã'])
    fig2 = px.bar(df_avg_scores, x='–°—Ç—Ä–∞—Ç–µ–≥–∏—è', y='–°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã', title="–°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
    st.plotly_chart(fig2)
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    st.subheader("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
    cursor.execute('''
        SELECT opponent_strategy, SUM(user_score) as total_score
        FROM games
        GROUP BY opponent_strategy
    ''')
    total_scores = cursor.fetchall()
    
    df_total_scores = pd.DataFrame(total_scores, columns=['–°—Ç—Ä–∞—Ç–µ–≥–∏—è', '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤'])
    fig3 = px.pie(df_total_scores, names='–°—Ç—Ä–∞—Ç–µ–≥–∏—è', values='–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤', title="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
    st.plotly_chart(fig3)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
    cursor.execute('''
        SELECT opponent_strategy, COUNT(*) as games_count
        FROM games
        GROUP BY opponent_strategy
    ''')
    games_count = cursor.fetchall()
    
    df_games_count = pd.DataFrame(games_count, columns=['–°—Ç—Ä–∞—Ç–µ–≥–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä'])
    fig4 = px.bar(df_games_count, x='–°—Ç—Ä–∞—Ç–µ–≥–∏—è', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä', title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
    st.plotly_chart(fig4)
    
    # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–±–µ–¥, –ø–æ—Ä–∞–∂–µ–Ω–∏–π –∏ –Ω–∏—á—å–∏—Ö
    st.subheader("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–±–µ–¥, –ø–æ—Ä–∞–∂–µ–Ω–∏–π –∏ –Ω–∏—á—å–∏—Ö")
    cursor.execute('''
        SELECT result, COUNT(*) as result_count
        FROM games
        GROUP BY result
    ''')
    results = cursor.fetchall()
    
    df_results = pd.DataFrame(results, columns=['–†–µ–∑—É–ª—å—Ç–∞—Ç', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
    fig5 = px.pie(df_results, names='–†–µ–∑—É–ª—å—Ç–∞—Ç', values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', title="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–±–µ–¥, –ø–æ—Ä–∞–∂–µ–Ω–∏–π –∏ –Ω–∏—á—å–∏—Ö")
    st.plotly_chart(fig5)
    
    # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–±–µ–¥ –±–æ—Ç–∞ –ø–æ –¥–∞—Ç–∞–º
    st.subheader("–ü–æ–±–µ–¥—ã –±–æ—Ç–∞ –ø–æ –¥–∞—Ç–∞–º")
    cursor.execute('''
        SELECT played_at, SUM(CASE WHEN result='loss' THEN 1 ELSE 0 END) AS bot_wins
        FROM games
        GROUP BY played_at
        ORDER BY played_at
    ''')
    bot_wins = cursor.fetchall()
    
    df_bot_wins = pd.DataFrame(bot_wins, columns=['–î–∞—Ç–∞', '–ü–æ–±–µ–¥—ã –±–æ—Ç–∞'])
    fig6 = px.line(df_bot_wins, x='–î–∞—Ç–∞', y='–ü–æ–±–µ–¥—ã –±–æ—Ç–∞', title="–ü–æ–±–µ–¥—ã –±–æ—Ç–∞ –ø–æ –¥–∞—Ç–∞–º")
    st.plotly_chart(fig6)

def play_round(user_choice):
    bot_choice = strategies[st.session_state.game['strategy']](
        st.session_state.game['user_choices'],
        st.session_state.game['bot_choices']
    )
    
    # –†–∞—Å—á–µ—Ç –æ—á–∫–æ–≤
    if user_choice == 'cooperate' and bot_choice == 'cooperate':
        us, bs = 3, 3
    elif user_choice == 'cooperate' and bot_choice == 'betray':
        us, bs = 0, 5
    elif user_choice == 'betray' and bot_choice == 'cooperate':
        us, bs = 5, 0
    else:
        us, bs = 1, 1
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    st.session_state.game['user_score'] += us
    st.session_state.game['bot_score'] += bs
    st.session_state.game['user_choices'].append(user_choice)
    st.session_state.game['bot_choices'].append(bot_choice)
    st.session_state.game['round'] += 1

    # –ï—Å–ª–∏ —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    if st.session_state.game['round'] >= 10:
        st.session_state.game['round'] = 10  # –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞ 10 —Ä–∞—É–Ω–¥–∞—Ö
        st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    else:
        st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞

def show_game():
    st.header("üéÆ –ò–≥—Ä–∞: C–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞")
    
    if st.session_state.game['round'] >= 10:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if st.session_state.game['user_score'] > st.session_state.game['bot_score']:
            result = 'win'
        elif st.session_state.game['user_score'] < st.session_state.game['bot_score']:
            result = 'loss'
        else:
            result = 'draw'  # –ù–∏—á—å—è
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        cursor.execute('''
            INSERT INTO games 
            (user_id, opponent_strategy, user_score, opponent_score, result)
            VALUES (?,?,?,?,?)''',
            (st.session_state.game['user_id'],
             st.session_state.game['strategy'],
             st.session_state.game['user_score'],
             st.session_state.game['bot_score'],
             result))
        conn.commit()
        
        # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if result == 'draw':
            st.success("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–ò–ß–¨–Ø")
        else:
            st.success(f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.upper()}")
        st.metric(label="–í–∞—à–∏ –æ—á–∫–∏", value=st.session_state.game['user_score'])
        st.metric(label="–û—á–∫–∏ –±–æ—Ç–∞", value=st.session_state.game['bot_score'])
        st.write(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è –±–æ—Ç–∞: **{st.session_state.game['strategy']}**")
        
        # –ü–æ–∫–∞–∑ –≤—Å–µ—Ö —Ö–æ–¥–æ–≤
        show_moves()
        
        # –ö–Ω–æ–ø–∫–∞ "–°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑"
        if st.button("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑", use_container_width=True):
            del st.session_state.game
            st.rerun()
        return

    st.subheader(f"–†–∞—É–Ω–¥ {st.session_state.game['round'] + 1}/10")
    
    # –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö —Ö–æ–¥–æ–≤
    show_moves()
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å", use_container_width=True):
            play_round('cooperate')
    with col2:
        if st.button("üî™ –ü—Ä–µ–¥–∞—Ç—å", use_container_width=True):
            play_round('betray')
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä—ã
    st.progress(st.session_state.game['round'] / 10)
    st.write(f"–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {st.session_state.game['user_score']} : {st.session_state.game['bot_score']}")

# –û—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def stats_page():
    st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    show_stats()

# –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ–º –∏ —Å—Å—ã–ª–∫–æ–π
def shapes_page():
    st.title("üñºÔ∏è –§–∏–≥—É—Ä—ã")
    st.write("""
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–∏–≥—É—Ä–∞–º–∏! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —Å–∞–π—Ç, 
        –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å —Ñ–∏–≥—É—Ä—ã. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å 
        —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.
    """)
    
    st.write('''
    # –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–∏–≥—É—Ä–∞–º–∏!
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —Å–∞–π—Ç, –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å —Ñ–∏–≥—É—Ä—ã. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.

---

## –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—É—Å–∞ –≤ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ

### –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
- **(x, y, z)** ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –≤ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.
  - **(x)** ‚Äî –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ.
  - **(y)** ‚Äî –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥-–Ω–∞–∑–∞–¥.
  - **(z)** ‚Äî –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑.
- **(a_cone1)** ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ä–∞–¥–∏—É—Å –æ—Å–Ω–æ–≤–∞–Ω–∏—è –∫–æ–Ω—É—Å–∞.
  - –ß–µ–º –±–æ–ª—å—à–µ **(a_cone1)**, —Ç–µ–º —à–∏—Ä–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—É—Å–∞.
- **(h_cone1)** ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –≤—ã—Å–æ—Ç—É –∫–æ–Ω—É—Å–∞.
  - –ß–µ–º –±–æ–ª—å—à–µ **(h_cone1)**, —Ç–µ–º –≤—ã—à–µ –∫–æ–Ω—É—Å.

### –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:
–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ—á–∫–∏ **(x, y, z)**, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–∂–∞—Ç –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫–æ–Ω—É—Å–∞ —Å –≤–µ—Ä—à–∏–Ω–æ–π –≤ —Ç–æ—á–∫–µ **(x_cone1, y_cone1, z_cone1)**. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã **(a_cone1)** –∏ **(h_cone1)** –∑–∞–¥–∞—é—Ç —Ñ–æ—Ä–º—É –∫–æ–Ω—É—Å–∞: –µ–≥–æ —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É.

---

## –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—É–±–∞ –≤ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ

–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—É–±–∞ –∑–∞–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

$$
\\max(|x - x_{cube1}|, |y - y_{cube1}|, |z - z_{cube1}|) = a_{cube1}
$$

### –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
- **(x, y, z)** ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –≤ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.
  - **(x)** ‚Äî –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ.
  - **(y)** ‚Äî –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥-–Ω–∞–∑–∞–¥.
  - **(z)** ‚Äî –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑.
- **(x_cube1, y_cube1, z_cube1)** ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫—É–±–∞.
  - **(x_cube1)** ‚Äî —Å–º–µ—â–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –∫—É–±–∞ –ø–æ –æ—Å–∏ **(x)**.
  - **(y_cube1)** ‚Äî —Å–º–µ—â–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –∫—É–±–∞ –ø–æ –æ—Å–∏ **(y)**.
  - **(z_cube1)** ‚Äî —Å–º–µ—â–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –∫—É–±–∞ –ø–æ –æ—Å–∏ **(z)**.
- **(a_cube1)** ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –ø–æ–ª–æ–≤–∏–Ω—É –¥–ª–∏–Ω—ã —Ä–µ–±—Ä–∞ –∫—É–±–∞.
  - –ß–µ–º –±–æ–ª—å—à–µ **(a_cube1)**, —Ç–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä –∫—É–±–∞.

### –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:
–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ—á–∫–∏ **(x, y, z)**, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–∂–∞—Ç –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫—É–±–∞ —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ —Ç–æ—á–∫–µ **(x_cube1, y_cube1, z_cube1)**. –ü–∞—Ä–∞–º–µ—Ç—Ä **(a_cube1)** –∑–∞–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫—É–±–∞.

---

## –£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã –≤ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ

–£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã –∑–∞–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

$$
(x - x_{sphere3})^2 + (y - y_{sphere3})^2 + (z - z_{sphere3})^2 = r_{sphere3}^2
$$

### –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
- **(x, y, z)** ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –≤ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.
  - **(x)** ‚Äî –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ.
  - **(y)** ‚Äî –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥-–Ω–∞–∑–∞–¥.
  - **(z)** ‚Äî –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑.
- **(x_sphere3, y_sphere3, z_sphere3)** ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ —Å—Ñ–µ—Ä—ã.
  - **(x_sphere3)** ‚Äî —Å–º–µ—â–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ —Å—Ñ–µ—Ä—ã –ø–æ –æ—Å–∏ **(x)**.
  - **(y_sphere3)** ‚Äî —Å–º–µ—â–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ —Å—Ñ–µ—Ä—ã –ø–æ –æ—Å–∏ **(y)**.
  - **(z_sphere3)** ‚Äî —Å–º–µ—â–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ —Å—Ñ–µ—Ä—ã –ø–æ –æ—Å–∏ **(z)**.
- **(r_sphere3)** ‚Äî —Ä–∞–¥–∏—É—Å —Å—Ñ–µ—Ä—ã.
  - –ß–µ–º –±–æ–ª—å—à–µ **(r_sphere3)**, —Ç–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä —Å—Ñ–µ—Ä—ã.

### –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:
–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ—á–∫–∏ **(x, y, z)**, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–∂–∞—Ç –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å—Ñ–µ—Ä—ã —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ —Ç–æ—á–∫–µ **(x_sphere3, y_sphere3, z_sphere3)**. –ü–∞—Ä–∞–º–µ—Ç—Ä **(r_sphere3)** –∑–∞–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Å—Ñ–µ—Ä—ã.
''')

    st.markdown("[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–∏–≥—É—Ä–∞–º](https://www.desmos.com/3d/qr2xgbo4vt)")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", ["–ò–≥—Ä–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–§–∏–≥—É—Ä—ã"])

if page == "–ò–≥—Ä–∞":
    st.title("üëÅÔ∏è –≠–≤–æ–ª—é—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")
    init_game_state()
    
    # –í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")
    if not username:
        st.stop()
    
    user_id = get_or_create_user(username)
    st.session_state.game['user_id'] = user_id
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    if not st.session_state.game['strategy']:
        st.session_state.game['strategy'] = random.choice(list(strategies.keys()))
        st.rerun()
    
    show_game()

elif page == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
    stats_page()

elif page == "–§–∏–≥—É—Ä—ã":
    shapes_page()
